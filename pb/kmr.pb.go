// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kmr.proto

/*
Package kmrpb is a generated protocol buffer package.

It is generated from these files:
	kmr.proto

It has these top-level messages:
	RegisterParams
	ReportInfo
	Task
	TaskInfo
	Response
	KV
*/
package kmrpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReportInfo_ErrorCode int32

const (
	ReportInfo_DOING  ReportInfo_ErrorCode = 0
	ReportInfo_ERROR  ReportInfo_ErrorCode = 1
	ReportInfo_FINISH ReportInfo_ErrorCode = 2
)

var ReportInfo_ErrorCode_name = map[int32]string{
	0: "DOING",
	1: "ERROR",
	2: "FINISH",
}
var ReportInfo_ErrorCode_value = map[string]int32{
	"DOING":  0,
	"ERROR":  1,
	"FINISH": 2,
}

func (x ReportInfo_ErrorCode) String() string {
	return proto.EnumName(ReportInfo_ErrorCode_name, int32(x))
}
func (ReportInfo_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type RegisterParams struct {
	JobName    string `protobuf:"bytes,1,opt,name=jobName" json:"jobName,omitempty"`
	WorkerID   int64  `protobuf:"varint,2,opt,name=workerID" json:"workerID,omitempty"`
	WorkerName string `protobuf:"bytes,3,opt,name=workerName" json:"workerName,omitempty"`
}

func (m *RegisterParams) Reset()                    { *m = RegisterParams{} }
func (m *RegisterParams) String() string            { return proto.CompactTextString(m) }
func (*RegisterParams) ProtoMessage()               {}
func (*RegisterParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterParams) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *RegisterParams) GetWorkerID() int64 {
	if m != nil {
		return m.WorkerID
	}
	return 0
}

func (m *RegisterParams) GetWorkerName() string {
	if m != nil {
		return m.WorkerName
	}
	return ""
}

type ReportInfo struct {
	TaskInfo *TaskInfo            `protobuf:"bytes,1,opt,name=taskInfo" json:"taskInfo,omitempty"`
	WorkerID int64                `protobuf:"varint,4,opt,name=workerID" json:"workerID,omitempty"`
	Retcode  ReportInfo_ErrorCode `protobuf:"varint,5,opt,name=retcode,enum=kmrpb.ReportInfo_ErrorCode" json:"retcode,omitempty"`
}

func (m *ReportInfo) Reset()                    { *m = ReportInfo{} }
func (m *ReportInfo) String() string            { return proto.CompactTextString(m) }
func (*ReportInfo) ProtoMessage()               {}
func (*ReportInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReportInfo) GetTaskInfo() *TaskInfo {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

func (m *ReportInfo) GetWorkerID() int64 {
	if m != nil {
		return m.WorkerID
	}
	return 0
}

func (m *ReportInfo) GetRetcode() ReportInfo_ErrorCode {
	if m != nil {
		return m.Retcode
	}
	return ReportInfo_DOING
}

type Task struct {
	Retcode  int32     `protobuf:"varint,1,opt,name=retcode" json:"retcode,omitempty"`
	Taskinfo *TaskInfo `protobuf:"bytes,2,opt,name=taskinfo" json:"taskinfo,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Task) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

func (m *Task) GetTaskinfo() *TaskInfo {
	if m != nil {
		return m.Taskinfo
	}
	return nil
}

type TaskInfo struct {
	JobNodeName     string `protobuf:"bytes,1,opt,name=jobNodeName" json:"jobNodeName,omitempty"`
	MapredNodeIndex int32  `protobuf:"varint,2,opt,name=mapredNodeIndex" json:"mapredNodeIndex,omitempty"`
	Phase           int32  `protobuf:"varint,3,opt,name=phase" json:"phase,omitempty"`
	SubIndex        int32  `protobuf:"varint,4,opt,name=subIndex" json:"subIndex,omitempty"`
}

func (m *TaskInfo) Reset()                    { *m = TaskInfo{} }
func (m *TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()               {}
func (*TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskInfo) GetJobNodeName() string {
	if m != nil {
		return m.JobNodeName
	}
	return ""
}

func (m *TaskInfo) GetMapredNodeIndex() int32 {
	if m != nil {
		return m.MapredNodeIndex
	}
	return 0
}

func (m *TaskInfo) GetPhase() int32 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *TaskInfo) GetSubIndex() int32 {
	if m != nil {
		return m.SubIndex
	}
	return 0
}

type Response struct {
	Retcode int32 `protobuf:"varint,1,opt,name=retcode" json:"retcode,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Response) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

type KV struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KV) Reset()                    { *m = KV{} }
func (m *KV) String() string            { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()               {}
func (*KV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KV) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KV) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterParams)(nil), "kmrpb.RegisterParams")
	proto.RegisterType((*ReportInfo)(nil), "kmrpb.ReportInfo")
	proto.RegisterType((*Task)(nil), "kmrpb.Task")
	proto.RegisterType((*TaskInfo)(nil), "kmrpb.TaskInfo")
	proto.RegisterType((*Response)(nil), "kmrpb.Response")
	proto.RegisterType((*KV)(nil), "kmrpb.KV")
	proto.RegisterEnum("kmrpb.ReportInfo_ErrorCode", ReportInfo_ErrorCode_name, ReportInfo_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Master service

type MasterClient interface {
	RequestTask(ctx context.Context, in *RegisterParams, opts ...grpc.CallOption) (*Task, error)
	ReportTask(ctx context.Context, in *ReportInfo, opts ...grpc.CallOption) (*Response, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) RequestTask(ctx context.Context, in *RegisterParams, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/kmrpb.Master/RequestTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ReportTask(ctx context.Context, in *ReportInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kmrpb.Master/ReportTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Master service

type MasterServer interface {
	RequestTask(context.Context, *RegisterParams) (*Task, error)
	ReportTask(context.Context, *ReportInfo) (*Response, error)
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_RequestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RequestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kmrpb.Master/RequestTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RequestTask(ctx, req.(*RegisterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kmrpb.Master/ReportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ReportTask(ctx, req.(*ReportInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kmrpb.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestTask",
			Handler:    _Master_RequestTask_Handler,
		},
		{
			MethodName: "ReportTask",
			Handler:    _Master_ReportTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kmr.proto",
}

func init() { proto.RegisterFile("kmr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xdd, 0xce, 0x93, 0x40,
	0x10, 0x2d, 0xb4, 0xf4, 0x83, 0xe1, 0x4b, 0x8b, 0x1b, 0x4d, 0x48, 0x4d, 0x0c, 0xd9, 0x78, 0x41,
	0xa2, 0x72, 0x41, 0xe3, 0x13, 0xd8, 0xaa, 0xc4, 0xb4, 0x35, 0xab, 0xf1, 0x7e, 0x91, 0xa9, 0x56,
	0xa4, 0x4b, 0x77, 0xa9, 0x3f, 0x6f, 0xe0, 0x3b, 0xf9, 0x72, 0x66, 0x97, 0x82, 0x58, 0xa3, 0x77,
	0x33, 0x67, 0x67, 0xf6, 0x9c, 0x39, 0x33, 0xe0, 0x95, 0x95, 0x4c, 0x6a, 0x29, 0x1a, 0x41, 0x9c,
	0xb2, 0x92, 0x75, 0x4e, 0xf7, 0x30, 0x63, 0xf8, 0xe1, 0xa0, 0x1a, 0x94, 0xaf, 0xb9, 0xe4, 0x95,
	0x22, 0x21, 0xdc, 0x7c, 0x12, 0xf9, 0x96, 0x57, 0x18, 0x5a, 0x91, 0x15, 0x7b, 0xac, 0x4b, 0xc9,
	0x02, 0xdc, 0xaf, 0x42, 0x96, 0x28, 0xb3, 0x55, 0x68, 0x47, 0x56, 0x3c, 0x66, 0x7d, 0x4e, 0x1e,
	0x00, 0xb4, 0xb1, 0x69, 0x1c, 0x9b, 0xc6, 0x01, 0x42, 0x7f, 0x5a, 0x00, 0x0c, 0x6b, 0x21, 0x9b,
	0xec, 0xb8, 0x17, 0xe4, 0x11, 0xb8, 0x0d, 0x57, 0xa5, 0x8e, 0x0d, 0x8b, 0x9f, 0xce, 0x13, 0x23,
	0x28, 0x79, 0x7b, 0x81, 0x59, 0x5f, 0xf0, 0x07, 0xef, 0xe4, 0x8a, 0xf7, 0x29, 0xdc, 0x48, 0x6c,
	0xde, 0x8b, 0x02, 0x43, 0x27, 0xb2, 0xe2, 0x59, 0x7a, 0xff, 0xf2, 0xcf, 0x6f, 0xb2, 0x64, 0x2d,
	0xa5, 0x90, 0xcf, 0x44, 0x81, 0xac, 0xab, 0xa5, 0x4f, 0xc0, 0xeb, 0x51, 0xe2, 0x81, 0xb3, 0xda,
	0x65, 0xdb, 0x17, 0xc1, 0x48, 0x87, 0x6b, 0xc6, 0x76, 0x2c, 0xb0, 0x08, 0xc0, 0xf4, 0x79, 0xb6,
	0xcd, 0xde, 0xbc, 0x0c, 0x6c, 0xba, 0x81, 0x89, 0xd6, 0xa5, 0xbd, 0xe9, 0xd8, 0xb4, 0x6a, 0xa7,
	0xff, 0xb0, 0x1b, 0xe8, 0xa0, 0x07, 0xb2, 0xff, 0x33, 0x90, 0x2e, 0xa0, 0x3f, 0x2c, 0x70, 0x3b,
	0x98, 0x44, 0xe0, 0x6b, 0x83, 0x45, 0x81, 0x03, 0xcf, 0x87, 0x10, 0x89, 0x61, 0x5e, 0xf1, 0x5a,
	0x62, 0xa1, 0x91, 0xec, 0x58, 0xe0, 0x37, 0x43, 0xe1, 0xb0, 0x6b, 0x98, 0xdc, 0x05, 0xa7, 0xfe,
	0xc8, 0x55, 0xbb, 0x00, 0x87, 0xb5, 0x89, 0xf6, 0x4f, 0x9d, 0xf3, 0xb6, 0x71, 0x62, 0x1e, 0xfa,
	0x9c, 0x3e, 0x04, 0x97, 0xa1, 0xaa, 0xc5, 0x51, 0xe1, 0xbf, 0xa7, 0xa3, 0x8f, 0xc1, 0x7e, 0xf5,
	0x8e, 0x04, 0x30, 0x2e, 0xf1, 0xbb, 0x79, 0xbb, 0x65, 0x3a, 0xd4, 0x7c, 0x5f, 0xf8, 0xe7, 0x33,
	0x1a, 0x3d, 0xb7, 0xac, 0x4d, 0xd2, 0x13, 0x4c, 0x37, 0x5c, 0x5f, 0x14, 0x59, 0x82, 0xcf, 0xf0,
	0x74, 0x46, 0xd5, 0x18, 0xfb, 0xee, 0xf5, 0xbb, 0x19, 0x5e, 0xdc, 0xc2, 0x1f, 0x38, 0x45, 0x47,
	0x24, 0xed, 0x2e, 0xc5, 0xf4, 0xdc, 0xf9, 0x6b, 0x9f, 0x8b, 0x79, 0x0f, 0xb5, 0xc2, 0xe9, 0x28,
	0x9f, 0x9a, 0xa3, 0x5e, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x71, 0x8b, 0x9c, 0xe1, 0x02,
	0x00, 0x00,
}
